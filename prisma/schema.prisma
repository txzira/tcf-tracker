// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}
generator client {
  provider = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

model User {
  id      Int     @id  @default(autoincrement())
  email   String   @unique
  name    String?
  role String
  password String @db.Char(60)
  playerQuest PlayerQuest[]
  playerRequirement PlayerRequirement[]
}

model Faction{
  id Int @default(autoincrement()) @id
  name String @db.VarChar(30) @unique
  quest Quest[]
}

model Quest {
  id Int @default(autoincrement()) @id
  name String @db.VarChar(200) @unique
  faction Faction @relation(fields: [factionId], references: [id])
  factionId Int 
  availabilityFilter String @default("none")
  mapFilter String @default("none")
  questRequirement QuestRequirement[]
  playerQuest PlayerQuest[]
}

model QuestRequirement {
  id Int @default(autoincrement()) @id
  quest Quest @relation(fields: [questId], references: [id])
  questId Int
  item Item? @relation(fields: [itemId], references: [id])
  itemId Int?
  task String?
  quantity Int
  playerRequirement PlayerRequirement[]
}

model Item{
  id Int @default(autoincrement()) @id
  name String @unique
  imageUrl String?
  kMarks Int
  weight Float @default(0)
  factionPoints Int?
  questRequirement QuestRequirement[]
}

model PlayerQuest{
  id Int @default(autoincrement()) @id
  playerId Int 
  user User @relation(fields: [playerId], references: [id])
  questId Int
  quest Quest @relation(fields:[questId], references:[id])
  completed Boolean
  @@unique([playerId,questId])
}

model PlayerRequirement{
  id Int @default(autoincrement()) @id
  playerId Int
  user User @relation(fields: [playerId], references: [id])
  questRequirementId Int
  questRequirement QuestRequirement @relation(fields: [questRequirementId], references: [id])
}